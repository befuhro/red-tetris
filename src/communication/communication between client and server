Connection:
    'connection' => lorsqu'on joueur tente de se connecter a une board il utilisera ce point d'entree avec en donnee son login et la room qu'il souhaite rejoindre => server/controller/games.js line 76
        Si il est possible qu'rejoigne la partie, le serveur creer un object Game (aux besoin si c'est le premier joueur de la room ) => server/controller/games.js line 94
            Et l'integrera a cette partie et initialisera les events necessaires au deroulement de la parties  => server/controller/games.js line 5
        Si il est impossible de le connecter (partie lancee ou login deja utilise par un autre joueur sur la room), le serveur lui repondra avec le message d'erreur et deconnectera son socket => server/controller/games.js line 104

Events party:
    'disconnect' => Le joueur qui se deconnecte sera supprimer du la room (objet Game).  => server/controller/games.js line 10
        Si c'etait le seul joueur, la room sera supprimer.  => server/controller/games.js line 14
        Si il etait le leader de la room, le joueur suivant sera designer comme leader  => server/models/Games.js line 56

    'fetch pieces' => Le joueur veut recuperer de nouvelles pieces  => server/controller/games.js line 19
        Le serveur va chercher des pieces (5) a l'index demander par le joueur  => server/controller/games.js line 21
        Il genere aussi des nouvelles pieces si necessaire  => server/Models/Games.js line 28

    'start party' => Le joueur "leader" lance la partie
        Le serveur verifie qu'il s'agit bien de leader qui a fait la requete => server/controller/games.js line 26
        Si c'est le cas, il broadcast a tous les joueurs presents sur la room que la partie est lance  => server/controller/games.js line 29

    
